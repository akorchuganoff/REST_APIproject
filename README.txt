Описание проекта:
Данный проект - это REST API для службы доставки. Другими словами, можно сформировать полоноценный сервис по доставке чего либо, на базе данного API.
В нем предусмотрены следующие возможности:

Добавлять в систему курьеров
Менять о них информацию
Получать информацию по каждому курьеру

Также можно добавлять заказы
Менять информацию о заказе

Также можно назначить курьеру все возможные заказы подходящие по его тип
Отметить какой либо заказ выполненым


Инструкция по установке:
1) Установить библиотеки и зависимости из файла requirements.txt
2) Запустить файл server.py
3) Запросы для теста находятся в папке responses
4) Название каждого файла соответствует запросу, который он выполняет. С содержимым запросы вы можете ознакомиться
внутри файла

Инструкция по развертыванию сервера:
Войти на ВМ и выполнить следующие команды:
sudo apt-get update
sudo apt-get install python3 python3-pip python3-dev gcc git nginx
git clone https://<git_user_name>:<git_pass> @github.com/<git_user_name>/<repo_name>.git
pip3 install -r requirements.txt

Инструкция по запуску сервера:
    Выполнить следующие команды:
    # cd REST_APIproject
    # python3 server.py


Модели:

    Courier:
        Таблица с курьерами. В ней хранятся сведения обо всех курьерах
        courier_id = ID курьера. Первичный ключ
        courier_type = тип курьера (пеший, на велосипеде, на машине)
        working_hours = рабочие часы
        rating = рейтинг курьера
        earnings = заработок за все время
        weight_of_food = суммарный вес назначенных заказов(можно использовать, чтобы выдавать несколько заказов курьеру сразу)

        max_weight = максимальный вес который может поднять курьер
        completed_flag = Флаг. Показывает завершил ли курьер хотя бы 1 заказ или нет
        assign_time = время назначения последнего заказа

    CourierToOrder:
        Смежная таблица, которая связывает курьеров и заказы
        id = Первичный ключ
        order_id = Указывает на ID заказа. Берется из таблицы Orders
        courier_id = Указывает на ID курьера. Берется из таблицы Couriers
        assigned_time = Время назначения заказа
        completed_time = Время выполнения заказа. По умолчанию None.

    Orders:
            order_id = ID заказа. Первичный ключ
            weight = Вес заказа
            region = Регион доставки заказа
            delivery_hours = Время в которое можно доставить заказ
            flag = Флаг. Показывает на какой стадии заказ.(Только появился(None), назначен(assigned) или завершен(completed))

    CourierToRegion:
        Смежная таблица, которая связывает курьеров и регионы.
        id = Первичный ключ
        region_id = Указывает на номер региона. Берется из таблицы Regions
        courier_id = Указывает на ID курьера. Берется из таблицы Couriers
        time = Суммарное время доставки в этом региона
        count = Количество заказов выполненых в данном регионе

    Regions:
        Таблица с регионами. Хранит номера существующих регионов


Функции:

    courier_resourses.py

        CourierResource

            get:
                Отвечает на запрос patch(get/$id)
                Возвращает информацию о курьере

            patch:
                Отвечает на запрос patch(courier/$id)
                Изменяет информацию о курьере
                Если изменились регионы - изменяет информацию о регионах в смежной таблице courier_to_region
                Проверяет список всех заказов, на несоответствие новым условиям,
                Если находит заказ который не подходит под новые условия удаляет запись из смежной таблицы courier_to_order

        CouriersListResource

            post:
                Отвечает на запрос post(courier)
                Добавляет в таблицу данные о курьерах
                Если что то не удалось провалидировать возвращает http 400 "Bad request"

    order_resources.py

        OrderListResource:

            post:
                Отвечает на запрос post(orders)
                Проверяет валидность входных данных. Если не все заказы возможно обработать - ничего не добавляет, возвращает http 400 "Bad request"
                Если все данные валидны, то происходит добавление заказов в таблицу


        OrderAssign:
            post:
                Отвечает на запрос post(orders/assign)

                Добавляет все возможные заказы курьеру.
                При проверке заказа проверяет регион, вес заказа и сравнивет время доставки с расписанием работы
                Добавляет запись в смежную таблицу Courier_to_region
                Устанавливает время подачи заказа.
                Ставил флаг assigned у заказа

        OrderComplete:
            post:
                Отвечает на запрос post(orders/complete)

                Устанавливет у заказа, курьера и смежной таблицы completed_flag.
                Добавляет в таблицу активности в регионах новые данные.
                Считает рейтинг и начисляет заработную плату.
                Если не может найти курьера или заказ возвращает http 400 "Bad Request"

        checktime:
            Функция сверяет расписание работы курьера с часами доставки заказа.

            Данная функция принимает на вход класс курьера и класс заказа.
            Далее она преобразовывает строки расписания доставки и часов работы курьера в списки
            Затем для каждой пары элементов она проверяет на пересечение, если пересечение есть она возвращает True
            Если нет ни одного пересечения она возвращает False
